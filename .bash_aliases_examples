# Various examples:
function adsite { adcli info domain.com | grep computer-site; }
function adsiteservers { host -t srv _ldap._tcp."$1"._sites.domain.com; }
function alternate_fuser { lsof +D "$@"; }
function awsii { curl http://169.254.169.254/latest/dynamic/instanance-identity/document; }
function azmeta {
    curl -s -H Metadata:true "http://169.254.169.254/metadata/instance?api-version=2023-07-01" | jq
}
function cat {
    if type -P pygmentize >/dev/null; then
        pygmentize -g "$@"
    else
        /usr/bin/cat "$@"
    fi
}
function cert_rehash {
    if [[ $# -ne 1 ]]; then
        echo "usage: cert_rehash <certificate.pem>"
        echo "  Create certificate hash in /etc/ssl/certs for target pem file in that location."
        return 0
    fi
    cd /etc/ssl/certs || exit
    cert=$1
    hash=$(openssl x509 -hash -noout -in "$cert" 2>/dev/null)
    if [ -z "$hash" ]; then
        echo "hashing of certficate failed."
        return 1
    fi
    ln -sf "$cert" "${hash}".0
    cd - || exit
}
function certificatesan {
    if [[ $# -ne 1 ]]; then
        echo "usage: certficatesan <servername>[:portnumber]"
        return 0
    fi
    SERVER=$1
    openssl s_client -connect "$SERVER" </dev/null 2>/dev/null | openssl x509 -noout -text | grep DNS:
}
function certificatescan {
    if [[ $# -ne 1 ]]; then
        echo "usage: certficatescan <servername>[:portnumber]"
        return 0
    fi
    SERVER=$1
    echo | openssl s_client -connect "$SERVER"
}
function findlinks { find -L ./publish/ -xtype l; }
function findold { find . -mtime +90 -print; }
function findemptydir { find . -empty -type d; }
function findemptyfile { find . -empty -type f; }
function getattr {
    if [[ $1 == -g ]]; then
        ldp "(&(samaccountname=$2)(objectclass=group))" gidNumber
    else
        ldp 'samaccountname="$@"' displayName gidNumber loginShell uidNumber unixHomeDirectory
    fi
}
function getcloudtrail {
    account=$1
    aws s3 cp "s3://bucketname/AWSLogs/${account}/CloudTrail/us-east-1/year/month/day/" "./$account" --recursive
}
function getnextid {
    kerb
    uid=$(ldp -E pr=10000/noprompt "(&(objectClass=person)(uidNumber=*)(uidNumber>=42000))" uidNumber 2>/dev/null | awk '$1 == "uidNumber:" {print $2 }' | sort -n | awk -v n=42000 '$0 < n { next }; $0 == n { n++; next }; { exit }; END { print n }')
    echo "next uid number available is $uid"
    gid=$(ldp -E pr=10000/noprompt "(&(objectClass=group)(gidNumber=*)(gidNumber>=8000))" gidNumber 2>/dev/null | awk '$1 == "gidNumber:" {print $2 }' | sort -n | awk -v n=8000 '$0 < n { next }; $0 == n { n++; next }; { exit }; END { print n }')
    echo "next gid number available is $gid"
}
function join { 
    realm join -v -U joinuser@DOMAIN.COM --computer-ou="OU=UNIX" DOMAIN.COM
}
function kerb { if ! klist -s; then kinit; fi; }
function ldapservers { host -t srv _ldap._tcp.domain.com; }
function ldp { kerb; /usr/bin/ldapsearch -o ldif-wrap=no -LLL -Q "$@" 2>&1; }
function ls { LC_COLLATE=C /usr/bin/ls --color "$@"; }
function moon { curl http://wttr.in/Moon; }
function papply { puppet apply manifests/site.pp --modulepath=modules; }
function pb-query {
    curl -s -X GET http://puppetboardserver:8080/pdb/query/v4/facts --data-urlencode 'query=["=", "name", "application"]' | jq
}
function python-outdated { pip list --outdated; }
function python-profile { python3 -m cProfile "$1"; }
function python-update { 
    pip freeze --local | grep -v '^\-e' | cur -d = -f 1 | xargs -n1 pip install -U
}
function rpmcontents { rpm -q -l -p "$1"; }
function rpmscripts { rpm -q --scripts -p "$1"; }
function rpmtriggers { rpm -q --triggers -p "$1"; }
function rpmextract { rpm2cpio "$1" | cpio -idmv; }
function site { host -t srv _ldap._tcp.Site-Name._sites.domain.com; }
function sitedcs {
    host -t any "_ldap._tcp.${1}._sites.domain.com"
}
function sites {
    kerb
    ldp -E pr=1000/noprompt -b cn=configuration,dc=domain,dc=com objectClass="site"
}
function sitestar { ldp -b cn=configuration,dc=domain,dc=com "(&(objectClass='site')(cn=Site-*))"; }
function ssh {
    /usr/bin/ssh -o PubkeyAuthentication=yes -o PasswordAuthentication=no -o GSSAPIAuthentication=yes \
                 -o GSSAPIDelegateCredentials=yes -o ForwardAgent=yes -o ForwardX11=yes \
                 -o ForwardX11Trusted=yes "$@"
}
function ssh-untrusted {
    /usr/bin/ssh -o PubkeyAuthentication=yes -o PasswordAuthentication=no -o GSSAPIAuthentication=no \
                 -o GSSAPIDelegateCredentials=no -o ForwardAgent=no -o ForwardX11=no \
                 -o ForwardX11Trusted=no "$@"
}
function subnets {
    kerb
    ldp -E pr=1000/noprompt -b cn=configuration,dc=domain,dc=com objectClass="subnet"
}
# See export SYSTEMD_PAGER=
function systemctl-example { /usr/bin/systemctl --no-pager "$@"; }
function testport {
    SERVER=$1
    PORT=$2
    if ! :</dev/tcp/"$SERVER"/"$PORT"; then
        #if [[ $? -ne 0 ]]; then
        echo "Connection to $SERVER on port $PROT failed"
        return 1
    else
        echo "Connection to $SERVER on port $PORT succeeded"
        return 0
    fi
}
function vi {
    if [ -f /usr/bin/nvim ]; then
        /usr/bin/nvim "$@"
    elif [ -f /usr/bin/vim ]; then
        /usr/bin/vim "$@"
    else
        /usr/bin/vi "$@"
    fi
}
function weather { curl http://wttr.in/MSP; }
function whatsmyip { curl -s http://whatismyip.akamai.com/; }

# sudoreplay -l user username command crontab
# sudoreplay -n username/00/00/09

# Install perl modules into the local library:
#perl -MCPAN -Mlocal::lib -e 'CPAN::install(LWP)'
#perl -MCPAN -Mlocal::lib -e 'CPAN::install(Net::SSH::Perl)'
#perl -MCPAN -Mlocal::lib=/accurev/CPAN -e 'CPAN::install(Net::SSH::Perl)'

# Test the installed module:
#perl -Mlocal::lib -MNet::SSH::Perl -e "use Net::SSH::Perl"
#perl -Mlocal::lib -e "use Net::SSH::Perl"
#PERL5LIB=${HOME}/perl5/lib/perl5 perl -MNet::SSH::Perl -e "use Net::SSH::Perl"
#perl -I${HOME}/perl5/lib/perl5 -MNet::SSH::Perl -e "use Net::SSH::Perl"

# diff <(ssh -q hostname1 cat /etc/sudoers) <(ssh -q hostname2 cat /etc/sudoers)

# lsof -i :80
